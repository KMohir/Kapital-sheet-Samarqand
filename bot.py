import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import CommandStart
from datetime import datetime
import os
from environs import Env
import gspread
from google.oauth2.service_account import Credentials
import platform
import sqlite3
import psycopg2
from psycopg2 import sql, IntegrityError
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env = Env()
env.read_env()
API_TOKEN = env.str('BOT_TOKEN')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    type = State()  # –ö–∏—Ä–∏–º/–ß–∏“õ–∏–º
    object_name = State()  # –û–±—ä–µ–∫—Ç –Ω–æ–º–∏
    expense_type = State()  # –•–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏
    currency_type = State()  # –°–æ–º –∏–ª–∏ –î–æ–ª–ª–∞—Ä
    payment_type = State()  # –¢—É–ª–æ–≤ —Ç—É—Ä–∏
    amount = State()  # –°—É–º–º–∞
    exchange_rate = State()  # –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞)
    comment = State()  # –ò–∑–æ—Ö

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ö–∏—Ä–∏–º/–ß–∏“õ–∏–º
start_kb = InlineKeyboardMarkup(row_width=2)
start_kb.add(
    InlineKeyboardButton('üü¢ –ö–∏—Ä–∏–º', callback_data='type_kirim'),
    InlineKeyboardButton('üî¥ –ß–∏“õ–∏–º', callback_data='type_chiqim')
)

# –û–±—ä–µ–∫—Ç—ã –Ω–æ–º–∏
object_names = [
    "–°–∞–º –°–∏—Ç–∏",
    "–°–∏—Ç–π+–°–∏—ë–± –ë –ô –ö –±–ª–æ–∫",
    "–ê–ª –ë—É—Ö–æ—Ä–∏–π",
    "–ê–ª-–ë—É—Ö–æ—Ä–∏–π –•–æ—Ç–µ–ª",
    "–†—É–±–ª–æ–≤–∫–∞",
    "“ö—É–≤–∞ “ö–í–ü",
    "–ú–∞–∫–æ–Ω –ú–∞–ª–ª",
    "–ö–∞—Ä—à–∏ –ú–∞–ª–ª",
    "–ö–∞—Ä—à–∏ –•–æ—Ç–µ–ª",
    "–í–æ—Ö–∞ –ì–∞–≤—Ö–∞—Ä–∏",
    "–ó–∞—Ä–º–µ—Ç–∞–Ω —É—Å—Ç–æ “í–∞—Ñ—É—Ä",
    "–ö–æ–∂–∞ –∑–∞–≤–æ–¥",
    "–ú–æ—Ç—Ä–∏–¥ –∫–∞—Ç–µ–∂",
    "–•–∏—à—Ä–∞–≤",
    "–ú–∞—Ö–¥—É–º–∏ –ê–∑–∞–º",
    "–°–∏—Ä–¥–∞—Ä—ë 1/10 –ó—É—Ö—Ä–∏",
    "–≠—à–æ–Ω–≥—É–∑–∞—Ä",
    "–†—É–±–ª–æ–≤–∫–∞(–•–æ–∂–∏ –±–æ–±–æ –¥–æ–º)",
    "–£—Ä–≥—É—Ç",
    "“ö—û“õ–æ–Ω –º–∞–ª–ª"
]

# –¢–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
expense_types = [
    "–ú–∏–∂–æ–∑–ª–∞—Ä–¥–∞–Ω",
    "–î–æ—Ä–æ–∂–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
    "–ü–∏—Ç–∞–Ω–∏—è",
    "–ö—É—Ä–∏–ª–∏—à –º–∞—Ç–µ—Ä–∏–∞–ª–ª–∞—Ä",
    "–•–æ–∑ —Ç–æ–≤–∞—Ä—ã –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
    "–†–µ–º–æ–Ω—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∑–∞–ø—á–∞—Å—Ç–∏",
    "–ö–æ–º–º—É–Ω–∞–ª –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
    "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã",
    "–•–∏–∑–º–∞—Ç (–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã)",
    "–ô–æ“õ–∏–ª“ì–∏",
    "–û–π–ª–∏–∫",
    "–û–±—ë–º",
    "–û–ª–∏–± —á–∏–∫–∏–± –∫–µ—Ç–∏–ª–≥–∞–Ω –º—É—Å–æ—Ä",
    "–ê—Ä–µ–Ω–¥–∞ —Ç–µ—Ö–Ω–∏–∫–∞",
    "–ü–µ—Ä–µ—á–µ—Å–ª–µ–Ω–∏—è –†–∞—Å—Ö–æ–¥",
    "–ü–µ—Ä–µ—á–µ—Å–ª–µ–Ω–∏—è –ü—Ä–∏—Ö–æ–¥",
    "–≠—Ö—Å–æ–Ω",
    "–ö–∞—Ä–∑ –æ–ª–∏–Ω–¥–∏",
    "–ö–∞—Ä–∑ –∫–∞–π—Ç–∞—Ä–∏–ª–¥–∏",
    "–ü–µ—Ä–µ–≤–æ–¥",
    "–î–æ–ª–ª–∞—Ä –æ–ª–∏–Ω–¥–∏",
    "–î–æ–ª–ª–∞—Ä –°–æ—Ç–∏–ª–¥–∏",
    "–ü—Ä–µ–º–∏—è",
    "–†–∞—Å—Ö–æ–¥ —Ç–µ—Ö–Ω–∏–∫–∞",
    "—Ö–æ–∑—Ç–∞–≤–∞—Ä",
    "–ö—É–Ω–ª–∏–∫ –∏—à—á–∏",
    "–ö–æ–Ω—Å—Ç–∞–≤–∞—Ä",
    "–•–æ–º–∏–π–ª–∏–∫"
]

# –¢–∏–ø—ã –≤–∞–ª—é—Ç
currency_types = [
    ("–°–æ–º", "currency_som"),
    ("–î–æ–ª–ª–∞—Ä", "currency_dollar")
]

# –¢–∏–ø—ã –æ–ø–ª–∞—Ç—ã
payment_types = [
    ("–ù–∞—Ö—Ç", "payment_nah"),
    ("–ü–ª–∞—Å—Ç–∏–∫", "payment_plastik"),
    ("–ë–∞–Ω–∫", "payment_bank")
]

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç–∞—Ä—ã–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
categories = [
    ("üü• Doimiy Xarajat", "cat_doimiy"),
    ("üü© O ªzgaruvchan Xarajat", "cat_ozgaruvchan"),
    ("üü™ Qarz", "cat_qarz"),
    ("‚ö™ Avtoprom", "cat_avtoprom"),
    ("üü© Divident", "cat_divident"),
    ("üü™ Soliq", "cat_soliq"),
    ("üü¶ Ish Xaqi", "cat_ishhaqi")
]

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: –∫–∞—Ç–µ–≥–æ—Ä–∏—è -> —ç–º–æ–¥–∑–∏
category_emojis = {
    "Qurilish materiallari": "üü©",
    "Doimiy Xarajat": "üü•",
    "Qarz": "üü™",
    "Divident": "üü©",
    "Soliq": "üü™",
    "Ish Xaqi": "üü¶",
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —ç–º–æ–¥–∑–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

def get_category_with_emoji(category_name):
    emoji = category_emojis.get(category_name, "")
    return f"{emoji} {category_name}".strip()

def get_object_names_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for name in get_object_names():
        cb = f"object_{name}"
        kb.add(InlineKeyboardButton(name, callback_data=cb))
    return kb

def get_expense_types_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for name in get_expense_types():
        cb = f"expense_{name}"
        kb.add(InlineKeyboardButton(name, callback_data=cb))
    return kb

def get_currency_types_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for name, cb in currency_types:
        kb.add(InlineKeyboardButton(name, callback_data=cb))
    return kb

def get_payment_types_kb():
    kb = InlineKeyboardMarkup(row_width=1)
    for name, cb in payment_types:
        kb.add(InlineKeyboardButton(name, callback_data=cb))
    return kb

def get_categories_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for name in get_categories():
        cb = f"cat_{name}"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –º–µ–Ω—é
        btn_text = get_category_with_emoji(name)
        kb.add(InlineKeyboardButton(btn_text, callback_data=cb))
    return kb

# –¢–∏–ø –æ–ø–ª–∞—Ç—ã
pay_types = [
    ("Plastik", "pay_plastik"),
    ("Naxt", "pay_naxt"),
    ("Perevod", "pay_perevod"),
    ("Bank", "pay_bank")
]

def get_pay_types_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for name in get_pay_types():
        cb = f"pay_{name}"
        kb.add(InlineKeyboardButton(name, callback_data=cb))
    return kb

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è Izoh
skip_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment"))

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_kb = InlineKeyboardMarkup(row_width=2)
confirm_kb.add(
    InlineKeyboardButton('‚úÖ Ha', callback_data='confirm_yes'),
    InlineKeyboardButton('‚ùå Yoq', callback_data='confirm_no')
)

# --- Google Sheets settings ---
SHEET_ID = '1D-9i4Y2R_txHL90LI0Kohx7H1HjvZ8vNJlLi7r4n6Oo'
SHEET_NAME = '–ö–∏—Ä–∏–º–ß–∏–∫–∏–º'
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
CREDENTIALS_FILE = 'credentials.json'

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏—Å—Ç–æ–≤
def get_sheet_names():
    try:
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(SHEET_ID)
        return [ws.title for ws in sh.worksheets()]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–∏—Å—Ç–æ–≤: {e}")
        return []

def clean_emoji(text):
    # –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏/—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç
    return re.sub(r'^[^\w\s]+', '', text).strip()

def add_to_google_sheet(data):
    from datetime import datetime
    global recent_entries
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    user_id = data.get('user_id', '')
    current_time = datetime.now().timestamp()
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–ø–∏—Å–∏
    entry_key = f"{user_id}_{data.get('object_name', '')}_{data.get('type', '')}_{data.get('expense_type', '')}_{data.get('amount', '')}_{data.get('comment', '')}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
    if entry_key in recent_entries:
        last_time = recent_entries[entry_key]
        if current_time - last_time < 30:  # 30 —Å–µ–∫—É–Ω–¥
            logging.info(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False –µ—Å–ª–∏ —ç—Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–π –∑–∞–ø–∏—Å–∏
    recent_entries[entry_key] = current_time
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
    current_time = datetime.now().timestamp()
    recent_entries = {k: v for k, v in recent_entries.items() if current_time - v < 300}
    
    creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(SHEET_ID)
    worksheet = sh.worksheet(SHEET_NAME)
    now = datetime.now()
    if platform.system() == 'Windows':
        date_str = now.strftime('%m/%d/%Y')
    else:
        date_str = now.strftime('%-m/%-d/%Y')
    time_str = now.strftime('%H:%M')
    user_name = get_user_name(data.get('user_id', data.get('user_id', '')))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
    currency_type = data.get('currency_type', '')
    amount = data.get('amount', '')
    exchange_rate = data.get('exchange_rate', '')
    
    if currency_type == '–î–æ–ª–ª–∞—Ä':
        # –ï—Å–ª–∏ –¥–æ–ª–ª–∞—Ä: –ö—É—Ä—Å = –∫—É—Ä—Å, $ = —Å—É–º–º–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –°–æ–º = –ø—É—Å—Ç–æ
        som_amount = ''
        dollar_amount = int(float(amount)) if amount else ''
        exchange_rate = int(float(exchange_rate)) if exchange_rate else ''
    else:
        # –ï—Å–ª–∏ —Å–æ–º: –ö—É—Ä—Å = –ø—É—Å—Ç–æ, $ = –ø—É—Å—Ç–æ, –°–æ–º = —Å—É–º–º–∞ –≤ —Å–æ–º–∞—Ö
        som_amount = int(float(amount)) if amount else ''
        dollar_amount = ''
        exchange_rate = ''
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    all_values = worksheet.get_all_values()
    
    # –ò—â–µ–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    next_row = 2  # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ —Å—Ç—Ä–æ–∫–∏ 2 (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    for i, row in enumerate(all_values[1:], 2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if not any(cell.strip() for cell in row[:9]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 9 —Å—Ç–æ–ª–±—Ü–æ–≤
            next_row = i
            break
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        next_row = len(all_values) + 1
        # –†–∞—Å—à–∏—Ä—è–µ–º –ª–∏—Å—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if next_row > 45:
            worksheet.resize(next_row + 10, 25)  # –î–æ–±–∞–≤–ª—è–µ–º 10 —Å—Ç—Ä–æ–∫
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (A-J)
    worksheet.update(f'A{next_row}', data.get('object_name', ''))      # –û–±—ä–µ–∫—Ç –Ω–æ–º–∏
    worksheet.update(f'B{next_row}', data.get('type', ''))             # –ö–∏—Ä–∏–º/–ß–∏–∫–∏–º
    worksheet.update(f'C{next_row}', data.get('expense_type', ''))     # –•–∞—Ä–∞–∂–∞—Ç –¢—É—Ä–∏
    worksheet.update(f'D{next_row}', data.get('comment', ''))          # –ò–∑–æ—Ö
    worksheet.update(f'E{next_row}', dollar_amount)                     # $
    worksheet.update(f'F{next_row}', exchange_rate)                     # –ö—É—Ä—Å
    worksheet.update(f'G{next_row}', som_amount)                        # –°–æ–º
    worksheet.update(f'H{next_row}', date_str)                         # –°–∞–Ω–∞
    worksheet.update(f'I{next_row}', user_name)                        # –ú–∞—Å—É–ª —à–∞—Ö—Å
    worksheet.update(f'K{next_row}', data.get('payment_type', ''))     # –¢—É–ª–æ–≤ —Ç—É—Ä–∏
    
    return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞

def format_summary(data):
    tur_emoji = 'üü¢' if data.get('type') == '–ö–∏—Ä–∏–º' else 'üî¥'
    dt = data.get('dt', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–º–º–µ –∏ –≤–∞–ª—é—Ç–µ
    currency_type = data.get('currency_type', '')
    amount = data.get('amount', '-')
    
    if currency_type == '–î–æ–ª–ª–∞—Ä':
        exchange_rate = data.get('exchange_rate', '-')
        amount_info = f"{amount} $ (–∫—É—Ä—Å: {exchange_rate})"
    else:
        amount_info = f"{amount} –°–æ–º"
    
    return (
        f"<b>Natija:</b>\n"
        f"<b>Tur:</b> {tur_emoji} {data.get('type', '-')}\n"
        f"<b>–û–±—ä–µ–∫—Ç –Ω–æ–º–∏:</b> {data.get('object_name', '-')}\n"
        f"<b>–•–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏:</b> {data.get('expense_type', '-')}\n"
        f"<b>–í–∞–ª—é—Ç–∞:</b> {currency_type}\n"
        f"<b>–¢—É–ª–æ–≤ —Ç—É—Ä–∏:</b> {data.get('payment_type', '-')}\n"
        f"<b>–°—É–º–º–∞:</b> {amount_info}\n"
        f"<b>–ò–∑–æ—Ö:</b> {data.get('comment', '-')}\n"
        f"<b>Vaqt:</b> {dt}"
    )

# --- –ê–¥–º–∏–Ω—ã ---
ADMINS = [5657091547, 5048593195]  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å id –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è
pending_approvals = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
recent_entries = {}

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def get_db_conn():
    return psycopg2.connect(
        dbname=env.str('POSTGRES_DB', 'kapital'),
        user=env.str('POSTGRES_USER', 'postgres'),
        password=env.str('POSTGRES_PASSWORD', 'postgres'),
        host=env.str('POSTGRES_HOST', 'localhost'),
        port=env.str('POSTGRES_PORT', '5432')
    )

def init_db():
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE,
        name TEXT,
        phone TEXT,
        status TEXT,
        reg_date TEXT
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS admins (
        id SERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE,
        name TEXT,
        added_by BIGINT,
        added_date TEXT
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS pay_types (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS categories (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS object_names (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS expense_types (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE
    )''')
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    c.execute('DELETE FROM object_names')
    c.execute('DELETE FROM expense_types')
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã
    c.execute('SELECT COUNT(*) FROM pay_types')
    if c.fetchone()[0] == 0:
        for name in ["Plastik", "Naxt", "Perevod", "Bank"]:
            c.execute('INSERT INTO pay_types (name) VALUES (%s)', (name,))
    c.execute('SELECT COUNT(*) FROM categories')
    if c.fetchone()[0] == 0:
        for name in ["üü• Doimiy Xarajat", "üü© O ªzgaruvchan Xarajat", "üü™ Qarz", "‚ö™ Avtoprom", "üü© Divident", "üü™ Soliq", "üü¶ Ish Xaqi"]:
            c.execute('INSERT INTO categories (name) VALUES (%s)', (name,))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    c.execute('SELECT COUNT(*) FROM admins')
    if c.fetchone()[0] == 0:
        from datetime import datetime
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        for admin_id in ADMINS:
            c.execute('INSERT INTO admins (user_id, name, added_by, added_date) VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING',
                      (admin_id, f'Admin {admin_id}', admin_id, current_time))
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–æ–º–∏
    for name in object_names:
        c.execute('INSERT INTO object_names (name) VALUES (%s)', (name,))
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
    for name in expense_types:
        c.execute('INSERT INTO expense_types (name) VALUES (%s)', (name,))
    
    conn.commit()
    conn.close()

init_db()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_user_status(user_id):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT status FROM users WHERE user_id=%s', (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else None

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º ---
def is_admin(user_id):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT user_id FROM admins WHERE user_id=%s', (user_id,))
    row = c.fetchone()
    conn.close()
    return row is not None

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ ---
def add_admin(user_id, name, added_by):
    from datetime import datetime
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO admins (user_id, name, added_by, added_date) VALUES (%s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING',
                  (user_id, name, added_by, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        conn.commit()
        return True
    except IntegrityError:
        conn.rollback()
        return False
    finally:
        conn.close()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ ---
def remove_admin(user_id):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('DELETE FROM admins WHERE user_id=%s', (user_id,))
    result = c.rowcount > 0
    conn.commit()
    conn.close()
    return result

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ ---
def get_all_admins():
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT user_id, name, added_date FROM admins ORDER BY added_date')
    rows = c.fetchall()
    conn.close()
    return rows

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def register_user(user_id, name, phone):
    from datetime import datetime
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO users (user_id, name, phone, status, reg_date) VALUES (%s, %s, %s, %s, %s) ON CONFLICT (user_id) DO NOTHING',
                  (user_id, name, phone, 'pending', datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        conn.commit()
    except IntegrityError:
        conn.rollback()
    conn.close()

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def update_user_status(user_id, status):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('UPDATE users SET status=%s WHERE user_id=%s', (status, user_id))
    conn.commit()
    conn.close()

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Google Sheets ---
def get_user_name(user_id):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM users WHERE user_id=%s', (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else ''

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ ---
def get_pay_types():
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM pay_types')
    result = [row[0] for row in c.fetchall()]
    conn.close()
    return result

def get_categories():
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM categories ORDER BY name')
    result = [row[0] for row in c.fetchall()]
    conn.close()
    return result

def get_object_names():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ object_names
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM object_names')
    db_names = [row[0] for row in c.fetchall()]
    conn.close()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –≤ —Å–ø–∏—Å–∫–µ object_names
    result = []
    for name in object_names:
        if name in db_names:
            result.append(name)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    for name in db_names:
        if name not in result:
            result.append(name)
    
    return result

def get_expense_types():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞ expense_types
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM expense_types')
    db_names = [row[0] for row in c.fetchall()]
    conn.close()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –≤ —Å–ø–∏—Å–∫–µ expense_types
    result = []
    for name in expense_types:
        if name in db_names:
            result.append(name)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    for name in db_names:
        if name not in result:
            result.append(name)
    
    return result

# --- –°—Ç–∞—Ä—Ç —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π ---
@dp.message_handler(commands=['start'])
async def start(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    status = get_user_status(user_id)
    if status == 'approved':
        await state.finish()
        text = "<b>Qaysi turdagi operatsiya?</b>"
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton('üü¢ Kirim', callback_data='type_kirim'),
            InlineKeyboardButton('üî¥ Chiqim', callback_data='type_chiqim')
        )
        await msg.answer(text, reply_markup=kb)
        await Form.type.set()
    elif status == 'pending':
        await msg.answer('‚è≥ Sizning arizangiz ko\'rib chiqilmoqda. Iltimos, kuting.')
    elif status == 'denied':
        await msg.answer('‚ùå Sizga botdan foydalanishga ruxsat berilmagan.')
    else:
        await msg.answer('Ismingizni kiriting:')
        await state.set_state('register_name')

# --- FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
class Register(StatesGroup):
    name = State()
    phone = State()

@dp.message_handler(state='register_name', content_types=types.ContentTypes.TEXT)
async def process_register_name(msg: types.Message, state: FSMContext):
    await state.update_data(name=msg.text.strip())
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("üì± Telefon raqamni yuborish", request_contact=True))
    await msg.answer('Telefon raqamingizni yuboring:', reply_markup=kb)
    await state.set_state('register_phone')

@dp.message_handler(state='register_phone', content_types=types.ContentTypes.CONTACT)
async def process_register_phone(msg: types.Message, state: FSMContext):
    phone = msg.contact.phone_number
    data = await state.get_data()
    user_id = msg.from_user.id
    name = data.get('name', '')
    register_user(user_id, name, phone)
    await msg.answer('‚è≥ Arizangiz adminga yuborildi. Iltimos, kuting.', reply_markup=types.ReplyKeyboardRemove())
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    admins = get_all_admins()
    for admin_id, admin_name, added_date in admins:
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton('‚úÖ Ha', callback_data=f'approve_{user_id}'),
            InlineKeyboardButton('‚ùå Yoq', callback_data=f'deny_{user_id}')
        )
        await bot.send_message(admin_id, f'üÜï Yangi foydalanuvchi ro\'yxatdan o\'tdi:\nID: <code>{user_id}</code>\nIsmi: <b>{name}</b>\nTelefon: <code>{phone}</code>', reply_markup=kb)
    await state.finish()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–∑–∞–ø—Ä–µ—Ç–∞ –∞–¥–º–∏–Ω–æ–º ---
@dp.callback_query_handler(lambda c: (c.data.startswith('approve_') or c.data.startswith('deny_')) and not c.data.startswith('approve_large_') and not c.data.startswith('reject_large_'), state='*')
async def process_admin_approve(call: types.CallbackQuery, state: FSMContext):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    action, user_id = call.data.split('_')
    user_id = int(user_id)
    if action == 'approve':
        update_user_status(user_id, 'approved')
        await bot.send_message(user_id, '‚úÖ Sizga botdan foydalanishga ruxsat berildi! /start')
        await call.message.edit_text('‚úÖ Foydalanuvchi tasdiqlandi.')
    else:
        update_user_status(user_id, 'denied')
        await bot.send_message(user_id, '‚ùå Sizga botdan foydalanishga ruxsat berilmagan.')
        await call.message.edit_text('‚ùå Foydalanuvchi rad etildi.')
    await call.answer()

# --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
@dp.message_handler(lambda msg: get_user_status(msg.from_user.id) != 'approved', state='*')
async def block_unapproved(msg: types.Message, state: FSMContext):
    await msg.answer('‚è≥ Sizning arizangiz ko\'rib chiqilmoqda yoki sizga ruxsat berilmagan.')
    await state.finish()

# –°—Ç–∞—Ä—Ç
@dp.message_handler(CommandStart())
async def start(msg: types.Message, state: FSMContext):
    await state.finish()
    text = "<b>Qaysi turdagi operatsiya?</b>"
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton('üü¢ –ö–∏—Ä–∏–º', callback_data='type_kirim'),
        InlineKeyboardButton('üî¥ –ß–∏“õ–∏–º', callback_data='type_chiqim')
    )
    await msg.answer(text, reply_markup=kb)
    await Form.type.set()

# –ö–∏—Ä–∏–º/–ß–∏“õ–∏–º –≤—ã–±–æ—Ä
@dp.callback_query_handler(lambda c: c.data.startswith('type_'), state=Form.type)
async def process_type(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await call.answer()
    
    t = '–ö–∏—Ä–∏–º' if call.data == 'type_kirim' else '–ß–∏“õ–∏–º'
    await state.update_data(type=t)
    await call.message.edit_text("<b>–û–±—ä–µ–∫—Ç –Ω–æ–º–∏–Ω–∏ tanlang:</b>", reply_markup=get_object_names_kb())
    await Form.object_name.set()

# –û–±—ä–µ–∫—Ç –Ω–æ–º–∏ –≤—ã–±–æ—Ä
@dp.callback_query_handler(lambda c: c.data.startswith('object_'), state=Form.object_name)
async def process_object_name(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await call.answer()
    
    object_name = call.data[7:]  # –£–±–∏—Ä–∞–µ–º 'object_' –ø—Ä–µ—Ñ–∏–∫—Å
    await state.update_data(object_name=object_name)
    await call.message.edit_text("<b>–•–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏–Ω–∏ tanlang:</b>", reply_markup=get_expense_types_kb())
    await Form.expense_type.set()

# –•–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏ –≤—ã–±–æ—Ä
@dp.callback_query_handler(lambda c: c.data.startswith('expense_'), state=Form.expense_type)
async def process_expense_type(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await call.answer()
    
    expense_type = call.data[8:]  # –£–±–∏—Ä–∞–µ–º 'expense_' –ø—Ä–µ—Ñ–∏–∫—Å
    await state.update_data(expense_type=expense_type)
    await call.message.edit_text("<b>Qanday to'lov turi? –°–æ–º yoki $?</b>", reply_markup=get_currency_types_kb())
    await Form.currency_type.set()

# –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
@dp.callback_query_handler(lambda c: c.data.startswith('currency_'), state=Form.currency_type)
async def process_currency_type(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await call.answer()
    
    currency = '–°–æ–º' if call.data == 'currency_som' else '–î–æ–ª–ª–∞—Ä'
    await state.update_data(currency_type=currency)
    await call.message.edit_text("<b>Summani kiriting:</b>")
    await Form.amount.set()

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(lambda c: c.data.startswith('payment_'), state=Form.payment_type)
async def process_payment_type(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await call.answer()
    
    payment_map = {
        'payment_nah': '–ù–∞—Ö—Ç',
        'payment_plastik': '–ü–ª–∞—Å—Ç–∏–∫',
        'payment_bank': '–ë–∞–Ω–∫'
    }
    payment = payment_map.get(call.data, '–ù–∞—Ö—Ç')
    await state.update_data(payment_type=payment)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ "–ú–∏–∂–æ–∑–ª–∞—Ä–¥–∞–Ω"
    data = await state.get_data()
    expense_type = data.get('expense_type', '')
    
    if expense_type == '–ú–∏–∂–æ–∑–ª–∞—Ä–¥–∞–Ω':
        await call.message.edit_text("<b>–î–æ–≥–æ–≤–æ—Ä —Ä–∞–∫–∞–º–∏ kiriting (yoki –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):</b>", reply_markup=skip_kb)
    else:
        await call.message.edit_text("<b>–ò–∑–æ—Ö kiriting (yoki –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):</b>", reply_markup=skip_kb)
    
    await Form.comment.set()

# –°—É–º–º–∞
@dp.message_handler(lambda m: m.text.replace('.', '', 1).isdigit(), state=Form.amount)
async def process_amount(msg: types.Message, state: FSMContext):
    await state.update_data(amount=msg.text)
    data = await state.get_data()
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ –î–æ–ª–ª–∞—Ä, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—É—Ä—Å
    if data.get('currency_type') == '–î–æ–ª–ª–∞—Ä':
        await msg.answer("<b>–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞–Ω–∏ kiriting:</b>")
        await Form.exchange_rate.set()
    else:
        # –ï—Å–ª–∏ –°–æ–º, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–∏–ø—É –æ–ø–ª–∞—Ç—ã
        await msg.answer("<b>–¢—É–ª–æ–≤ —Ç—É—Ä–∏–Ω–∏ tanlang:</b>", reply_markup=get_payment_types_kb())
        await Form.payment_type.set()

# –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
@dp.message_handler(lambda m: m.text.replace('.', '', 1).isdigit(), state=Form.exchange_rate)
async def process_exchange_rate(msg: types.Message, state: FSMContext):
    await state.update_data(exchange_rate=msg.text)
    await msg.answer("<b>–¢—É–ª–æ–≤ —Ç—É—Ä–∏–Ω–∏ tanlang:</b>", reply_markup=get_payment_types_kb())
    await Form.payment_type.set()

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.callback_query_handler(lambda c: c.data == 'skip_comment', state=Form.comment)
async def skip_comment_btn(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await call.answer()
    
    await state.update_data(comment='-')
    data = await state.get_data()
    # Set and save the final timestamp
    data['dt'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    await state.update_data(dt=data['dt'])
    
    text = format_summary(data)
    
    await call.message.answer(text, reply_markup=confirm_kb)
    await state.set_state('confirm')

# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫)
@dp.message_handler(state=Form.comment, content_types=types.ContentTypes.TEXT)
async def process_comment(msg: types.Message, state: FSMContext):
    await state.update_data(comment=msg.text)
    data = await state.get_data()
    # Set and save the final timestamp
    data['dt'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    await state.update_data(dt=data['dt'])
    
    text = format_summary(data)

    await msg.answer(text, reply_markup=confirm_kb)
    await state.set_state('confirm')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç
@dp.callback_query_handler(lambda c: c.data in ['confirm_yes', 'confirm_no'], state='confirm')
async def process_confirm(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await call.answer()
    
    if call.data == 'confirm_yes':
        data = await state.get_data()
        from datetime import datetime
        dt = datetime.now()
        import platform
        if platform.system() == 'Windows':
            date_str = dt.strftime('%m/%d/%Y')
        else:
            date_str = dt.strftime('%-m/%-d/%Y')
        time_str = dt.strftime('%H:%M')
        data['dt_for_sheet'] = date_str
        data['vaqt'] = time_str
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ user_id –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
        data['user_id'] = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è Chiqim)
        operation_type = data.get('type', '')
        currency_type = data.get('currency_type', '')
        amount = data.get('amount', '0')
        exchange_rate = data.get('exchange_rate', '0')
        
        try:
            amount_value = float(amount)
            exchange_rate_value = float(exchange_rate) if exchange_rate != '0' else 1
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤ —Å–æ–º–∞—Ö
            if currency_type == '–î–æ–ª–ª–∞—Ä':
                total_som_amount = amount_value * exchange_rate_value
            else:
                total_som_amount = amount_value
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è Chiqim –∏ –µ—Å–ª–∏ —Å—É–º–º–∞ >= 10,000,000 —Å–æ–º)
            needs_approval = (operation_type == '–ß–∏“õ–∏–º' and total_som_amount >= 10000000)
            
            if needs_approval:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                user_name = get_user_name(call.from_user.id) or call.from_user.full_name
                summary_text = format_summary(data)
                admin_approval_text = f"‚ö†Ô∏è <b>Tasdiqlash talab qilinadi!</b>\n\nFoydalanuvchi <b>{user_name}</b> tomonidan kiritilgan katta summa:\n\n{summary_text}"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
                admin_kb = InlineKeyboardMarkup(row_width=2)
                admin_kb.add(
                    InlineKeyboardButton('‚úÖ Tasdiqlash', callback_data=f'approve_large_{call.from_user.id}_{int(dt.timestamp())}'),
                    InlineKeyboardButton('‚ùå Rad etish', callback_data=f'reject_large_{call.from_user.id}_{int(dt.timestamp())}')
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                approval_key = f"{call.from_user.id}_{int(dt.timestamp())}"
                pending_approvals[approval_key] = data
                data['pending_approval'] = True
                data['approval_timestamp'] = int(dt.timestamp())
                
                logging.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è. –ö–ª—é—á: {approval_key}")
                logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
                logging.info(f"–í—Å–µ pending approvals: {list(pending_approvals.keys())}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
                sent_to_admin = False
                admins = get_all_admins()
                logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤ –≤ –±–∞–∑–µ: {len(admins)}")
                for admin_id, admin_name, added_date in admins:
                    logging.info(f"–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id} ({admin_name})")
                    try:
                        await bot.send_message(admin_id, admin_approval_text, reply_markup=admin_kb)
                        sent_to_admin = True
                        logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                    except Exception as e:
                        error_msg = str(e)
                        if "Chat not found" in error_msg:
                            logging.error(f"‚ùå –ê–¥–º–∏–Ω {admin_id} ({admin_name}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –µ–≥–æ.")
                        elif "Forbidden" in error_msg:
                            logging.error(f"‚ùå –ê–¥–º–∏–Ω {admin_id} ({admin_name}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
                        else:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {error_msg}")
                
                if sent_to_admin:
                    await call.message.answer('‚è≥ Arizangiz administratorga yuborildi. Tasdiqlashni kuting.')
                else:
                    await call.message.answer('‚ö†Ô∏è Xatolik: tasdiqlashga yuborish amalga oshmadi. Iltimos, administrator bilan bog\'laning.')
            else:
                # –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Sheet
                success = add_to_google_sheet(data)
                if success:
                    await call.message.answer('‚úÖ Ma\'lumotlar Google Sheets-ga muvaffaqiyatli yuborildi!')
                else:
                    await call.message.answer('‚ö†Ô∏è Bu ma\'lumot allaqachon yozilgan. Qayta urinib ko\'rmang.')

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                user_name = get_user_name(call.from_user.id) or call.from_user.full_name
                summary_text = format_summary(data)
                admin_notification_text = f"Foydalanuvchi <b>{user_name}</b> tomonidan kiritilgan yangi ma'lumot:\n\n{summary_text}"
                
                admins = get_all_admins()
                for admin_id, admin_name, added_date in admins:
                    try:
                        await bot.send_message(admin_id, admin_notification_text)
                        logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id} ({admin_name})")
                    except Exception as e:
                        error_msg = str(e)
                        if "Chat not found" in error_msg:
                            logging.error(f"‚ùå –ê–¥–º–∏–Ω {admin_id} ({admin_name}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ")
                        elif "Forbidden" in error_msg:
                            logging.error(f"‚ùå –ê–¥–º–∏–Ω {admin_id} ({admin_name}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                        else:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {error_msg}")

        except Exception as e:
            await call.message.answer(f'‚ö†Ô∏è Google Sheets-ga yuborishda xatolik: {e}')
        await state.finish()
    else:
        await call.message.answer('‚ùå Operatsiya bekor qilindi.')
        await state.finish()
    # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —à–∞–≥—É
    text = "<b>Qaysi turdagi operatsiya?</b>"
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton('üü¢ –ö–∏—Ä–∏–º', callback_data='type_kirim'),
        InlineKeyboardButton('üî¥ –ß–∏“õ–∏–º', callback_data='type_chiqim')
    )
    await call.message.answer(text, reply_markup=kb)
    await Form.type.set()
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Å—É–º–º
@dp.callback_query_handler(lambda c: c.data.startswith('approve_large_'), state='*')
async def approve_large_amount(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await call.answer()
    
    logging.info(f"–û–¥–æ–±—Ä–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Å—É–º–º –≤—ã–∑–≤–∞–Ω–æ: {call.data}")
    
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    parts = call.data.split('_')
    user_id = int(parts[2])
    timestamp = int(parts[3])
    approval_key = f"{user_id}_{timestamp}"
    
    logging.info(f"Approval key: {approval_key}")
    logging.info(f"Pending approvals: {list(pending_approvals.keys())}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É
    try:
        await state.finish()
    except:
        pass
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if approval_key in pending_approvals:
            saved_data = pending_approvals[approval_key]
            logging.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è: {saved_data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Sheet
            success = add_to_google_sheet(saved_data)
            if success:
                logging.info("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Google Sheet")
            else:
                logging.info("–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(user_id, '‚úÖ Arizangiz tasdiqlandi! Ma\'lumotlar Google Sheet-ga yozildi.')
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            del pending_approvals[approval_key]
            
            # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            await call.message.edit_reply_markup(reply_markup=None)
        else:
            logging.error(f"–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∫–ª—é—á–∞: {approval_key}")
            await call.message.edit_text('‚ùå Ariza ma\'lumotlari topilmadi.', reply_markup=None)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
        await call.message.edit_reply_markup(reply_markup=None)
    
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Å—É–º–º
@dp.callback_query_handler(lambda c: c.data.startswith('reject_large_'), state='*')
async def reject_large_amount(call: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–ª–∞"
    await call.answer()
    
    logging.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Å—É–º–º –≤—ã–∑–≤–∞–Ω–æ: {call.data}")
    
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    parts = call.data.split('_')
    user_id = int(parts[2])
    timestamp = int(parts[3])
    approval_key = f"{user_id}_{timestamp}"
    
    logging.info(f"Rejection key: {approval_key}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É
    try:
        await state.finish()
    except:
        pass
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(user_id, '‚ùå Arizangiz administrator tomonidan rad etildi.')
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        if approval_key in pending_approvals:
            del pending_approvals[approval_key]
            logging.info(f"–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {approval_key}")
        
        # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        await call.message.edit_reply_markup(reply_markup=None)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
        await call.message.edit_reply_markup(reply_markup=None)
    
    await call.answer()

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
@dp.message_handler(commands=['add_tolov'], state='*')
async def add_paytype_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await msg.answer('Yangi To\'lov turi nomini yuboring:')
    await state.set_state('add_paytype')

@dp.message_handler(state='add_paytype', content_types=types.ContentTypes.TEXT)
async def add_paytype_save(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO pay_types (name) VALUES (%s)', (name,))
        conn.commit()
        await msg.answer(f'‚úÖ Yangi To\'lov turi qo\'shildi: {name}')
    except IntegrityError:
        await msg.answer('‚ùóÔ∏è Bu nom allaqachon mavjud.')
        conn.rollback()
    conn.close()
    await state.finish()

@dp.message_handler(commands=['add_category'], state='*')
async def add_category_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await msg.answer('Yangi kategoriya nomini yuboring:')
    await state.set_state('add_category')

@dp.message_handler(state='add_category', content_types=types.ContentTypes.TEXT)
async def add_category_save(msg: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    name = clean_emoji(msg.text.strip())
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO categories (name) VALUES (%s)', (name,))
        conn.commit()
        await msg.answer(f'‚úÖ Yangi kategoriya qo\'shildi: {name}')
    except IntegrityError:
        await msg.answer('‚ùóÔ∏è Bu nom allaqachon mavjud.')
        conn.rollback()
    conn.close()
    await state.finish()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ To'lov turi ---
@dp.message_handler(commands=['del_tolov'], state='*')
async def del_tolov_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_pay_types():
        kb.add(InlineKeyboardButton(f'‚ùå {name}', callback_data=f'del_tolov_{name}'))
    await msg.answer('O\'chirish uchun To\'lov turini tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('del_tolov_'))
async def del_tolov_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    name = call.data[len('del_tolov_'):]
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('DELETE FROM pay_types WHERE name=%s', (name,))
    conn.commit()
    conn.close()
    await call.message.edit_text(f'‚ùå To\'lov turi o\'chirildi: {name}')
    await call.answer()

@dp.message_handler(commands=['edit_tolov'], state='*')
async def edit_tolov_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_pay_types():
        kb.add(InlineKeyboardButton(f'‚úèÔ∏è {name}', callback_data=f'edit_tolov_{name}'))
    await msg.answer('Tahrirlash uchun To\'lov turini tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('edit_tolov_'))
async def edit_tolov_cb(call: types.CallbackQuery, state: FSMContext):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    old_name = call.data[len('edit_tolov_'):]
    await state.update_data(edit_tolov_old=old_name)
    await call.message.answer(f'Yangi nomini yuboring (eski: {old_name}):')
    await state.set_state('edit_tolov_new')
    await call.answer()

@dp.message_handler(state='edit_tolov_new', content_types=types.ContentTypes.TEXT)
async def edit_tolov_save(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    old_name = data.get('edit_tolov_old')
    new_name = msg.text.strip()
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('UPDATE pay_types SET name=%s WHERE name=%s', (new_name, old_name))
    conn.commit()
    conn.close()
    await msg.answer(f'‚úèÔ∏è To\'lov turi o\'zgartirildi: {old_name} -> {new_name}')
    await state.finish()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ Kotegoriyalar ---
@dp.message_handler(commands=['del_category'], state='*')
async def del_category_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_categories():
        kb.add(InlineKeyboardButton(f'‚ùå {name}', callback_data=f'del_category_{name}'))
    await msg.answer('O\'chirish uchun kategoriya tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('del_category_'))
async def del_category_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    name = call.data[len('del_category_'):]
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('DELETE FROM categories WHERE name=%s', (name,))
    conn.commit()
    conn.close()
    await call.message.edit_text(f'‚ùå Kategoriya o\'chirildi: {name}')
    await call.answer()

@dp.message_handler(commands=['edit_category'], state='*')
async def edit_category_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_categories():
        kb.add(InlineKeyboardButton(f'‚úèÔ∏è {name}', callback_data=f'edit_category_{name}'))
    await msg.answer('Tahrirlash uchun kategoriya tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('edit_category_'))
async def edit_category_cb(call: types.CallbackQuery, state: FSMContext):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    old_name = call.data[len('edit_category_'):]
    await state.update_data(edit_category_old=old_name)
    await call.message.answer(f'Yangi nomini yuboring (eski: {old_name}):')
    await state.set_state('edit_category_new')
    await call.answer()

@dp.message_handler(state='edit_category_new', content_types=types.ContentTypes.TEXT)
async def edit_category_save(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    old_name = data.get('edit_category_old')
    new_name = msg.text.strip()
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('UPDATE categories SET name=%s WHERE name=%s', (new_name, old_name))
    conn.commit()
    conn.close()
    await msg.answer(f'‚úèÔ∏è Kategoriya o\'zgartirildi: {old_name} -> {new_name}')
    await state.finish()

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ ---
@dp.message_handler(commands=['add_object'], state='*')
async def add_object_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    await msg.answer('Yangi –æ–±—ä–µ–∫—Ç –Ω–æ–º–∏–Ω–∏ yuboring:')
    await state.set_state('add_object')

@dp.message_handler(state='add_object', content_types=types.ContentTypes.TEXT)
async def add_object_save(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO object_names (name) VALUES (%s)', (name,))
        conn.commit()
        await msg.answer(f'‚úÖ Yangi –æ–±—ä–µ–∫—Ç –Ω–æ–º–∏ qo\'shildi: {name}')
    except IntegrityError:
        await msg.answer('‚ùóÔ∏è Bu nom allaqachon mavjud.')
        conn.rollback()
    conn.close()
    await state.finish()

@dp.message_handler(commands=['add_expense'], state='*')
async def add_expense_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    await msg.answer('Yangi —Ö–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏–Ω–∏ yuboring:')
    await state.set_state('add_expense')

@dp.message_handler(state='add_expense', content_types=types.ContentTypes.TEXT)
async def add_expense_save(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO expense_types (name) VALUES (%s)', (name,))
        conn.commit()
        await msg.answer(f'‚úÖ Yangi —Ö–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏ qo\'shildi: {name}')
    except IntegrityError:
        await msg.answer('‚ùóÔ∏è Bu nom allaqachon mavjud.')
        conn.rollback()
    conn.close()
    await state.finish()

@dp.message_handler(commands=['del_object'], state='*')
async def del_object_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_object_names():
        kb.add(InlineKeyboardButton(f'‚ùå {name}', callback_data=f'del_object_{name}'))
    await msg.answer('O\'chirish uchun –æ–±—ä–µ–∫—Ç –Ω–æ–º–∏–Ω–∏ tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('del_object_'))
async def del_object_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    name = call.data[len('del_object_'):]
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('DELETE FROM object_names WHERE name=%s', (name,))
    conn.commit()
    conn.close()
    await call.message.edit_text(f'‚ùå –û–±—ä–µ–∫—Ç –Ω–æ–º–∏ o\'chirildi: {name}')
    await call.answer()

@dp.message_handler(commands=['del_expense'], state='*')
async def del_expense_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_expense_types():
        kb.add(InlineKeyboardButton(f'‚ùå {name}', callback_data=f'del_expense_{name}'))
    await msg.answer('O\'chirish uchun —Ö–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏–Ω–∏ tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('del_expense_'))
async def del_expense_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    name = call.data[len('del_expense_'):]
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('DELETE FROM expense_types WHERE name=%s', (name,))
    conn.commit()
    conn.close()
    await call.message.edit_text(f'‚ùå –•–∞—Ä–∞–∂–∞—Ç —Ç—É—Ä–∏ o\'chirildi: {name}')
    await call.answer()

@dp.message_handler(commands=['check_sheets'], state='*')
async def check_sheets_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    
    sheet_names = get_sheet_names()
    if sheet_names:
        response = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã –≤ Google Sheet:\n\n"
        for i, name in enumerate(sheet_names, 1):
            response += f"{i}. {name}\n"
        await msg.answer(response)
    else:
        await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤")

@dp.message_handler(commands=['update_lists'], state='*')
async def update_lists_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    try:
        conn = get_db_conn()
        c = conn.cursor()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        c.execute('DELETE FROM object_names')
        c.execute('DELETE FROM expense_types')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
        for obj in object_names:
            c.execute('INSERT INTO object_names (name) VALUES (%s)', (obj,))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏–ø—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
        for exp in expense_types:
            c.execute('INSERT INTO expense_types (name) VALUES (%s)', (exp,))
        
        conn.commit()
        conn.close()
        
        await msg.answer('‚úÖ –°–ø–∏—Å–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ç–∏–ø–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
    except Exception as e:
        await msg.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–≤: {e}')

@dp.message_handler(commands=['userslist'], state='*')
async def users_list_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    conn = get_db_conn()
    c = conn.cursor()
    c.execute("SELECT user_id, name, phone, reg_date FROM users WHERE status='approved'")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await msg.answer('Hali birorta ham tasdiqlangan foydalanuvchi yo\'q.')
        return
    text = '<b>Tasdiqlangan foydalanuvchilar:</b>\n'
    for i, (user_id, name, phone, reg_date) in enumerate(rows, 1):
        text += f"\n{i}. <b>{name}</b>\nID: <code>{user_id}</code>\nTelefon: <code>{phone}</code>\nRo'yxatdan o'tgan: {reg_date}\n"
    await msg.answer(text)

@dp.message_handler(commands=['block_user'], state='*')
async def block_user_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    conn = get_db_conn()
    c = conn.cursor()
    c.execute("SELECT user_id, name FROM users WHERE status='approved'")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await msg.answer('Hali birorta ham tasdiqlangan foydalanuvchi yo\'q.')
        return
    kb = InlineKeyboardMarkup(row_width=1)
    for user_id, name in rows:
        kb.add(InlineKeyboardButton(f'üö´ {name} ({user_id})', callback_data=f'blockuser_{user_id}'))
    await msg.answer('Bloklash uchun foydalanuvchini tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('blockuser_'))
async def block_user_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    user_id = int(call.data[len('blockuser_'):])
    update_user_status(user_id, 'denied')
    try:
        await bot.send_message(user_id, '‚ùå Sizga botdan foydalanishga ruxsat berilmagan. (Admin tomonidan bloklandi)')
    except Exception:
        pass
    await call.message.edit_text(f'üö´ Foydalanuvchi bloklandi: {user_id}')
    await call.answer()

@dp.message_handler(commands=['approve_user'], state='*')
async def approve_user_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    conn = get_db_conn()
    c = conn.cursor()
    c.execute("SELECT user_id, name FROM users WHERE status='denied'")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await msg.answer('Hali birorta ham bloklangan foydalanuvchi yo\'q.')
        return
    kb = InlineKeyboardMarkup(row_width=1)
    for user_id, name in rows:
        kb.add(InlineKeyboardButton(f'‚úÖ {name} ({user_id})', callback_data=f'approveuser_{user_id}'))
    await msg.answer('Qayta tasdiqlash uchun foydalanuvchini tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('approveuser_'))
async def approve_user_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    user_id = int(call.data[len('approveuser_'):])
    update_user_status(user_id, 'approved')
    try:
        await bot.send_message(user_id, '‚úÖ Sizga botdan foydalanishga yana ruxsat berildi! /start')
    except Exception:
        pass
    await call.message.edit_text(f'‚úÖ Foydalanuvchi qayta tasdiqlandi: {user_id}')
    await call.answer()

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏ ---
@dp.message_handler(commands=['add_admin'], state='*')
async def add_admin_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    await msg.answer('Yangi admin ID raqamini yuboring:')
    await state.set_state('add_admin_id')

@dp.message_handler(state='add_admin_id', content_types=types.ContentTypes.TEXT)
async def add_admin_id_save(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    try:
        user_id = int(msg.text.strip())
        if user_id <= 0:
            await msg.answer('‚ùå Noto\'g\'ri ID raqam!')
            await state.finish()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–æ–º
        if is_admin(user_id):
            await msg.answer('‚ùå Bu foydalanuvchi allaqachon admin!')
            await state.finish()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        await state.update_data(admin_id=user_id)
        await msg.answer('Yangi admin ismini yuboring:')
        await state.set_state('add_admin_name')
        
    except ValueError:
        await msg.answer('‚ùå Noto\'g\'ri format! Faqat raqam kiriting.')
        await state.finish()

@dp.message_handler(state='add_admin_name', content_types=types.ContentTypes.TEXT)
async def add_admin_name_save(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    
    data = await state.get_data()
    user_id = data.get('admin_id')
    admin_name = msg.text.strip()
    
    if add_admin(user_id, admin_name, msg.from_user.id):
        await msg.answer(f'‚úÖ Yangi admin qo'shildi:\nID: <code>{user_id}</code>\nIsmi: <b>{admin_name}</b>')
        try:
            await bot.send_message(user_id, f'üéâ Sizga admin huquqlari berildi! Botda barcha admin funksiyalaridan foydalanishingiz mumkin.')
        except Exception:
            pass
    else:
        await msg.answer('‚ùå Xatolik yuz berdi!')
    
    await state.finish()

@dp.message_handler(commands=['remove_admin'], state='*')
async def remove_admin_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    
    admins = get_all_admins()
    if not admins:
        await msg.answer('Hali birorta ham admin yo'q.')
        return
    
    kb = InlineKeyboardMarkup(row_width=1)
    for user_id, name, added_date in admins:
        kb.add(InlineKeyboardButton(f'üë§ {name} ({user_id})', callback_data=f'removeadmin_{user_id}'))
    
    await msg.answer('O'chirish uchun adminni tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('removeadmin_'))
async def remove_admin_cb(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    
    user_id = int(call.data[len('removeadmin_'):])
    
    # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if user_id == call.from_user.id:
        await call.answer('‚ùå O'zingizni o'chira olmaysiz!', show_alert=True)
        return
    
    if remove_admin(user_id):
        await call.message.edit_text(f'‚úÖ Admin o'chirildi: {user_id}')
        try:
            await bot.send_message(user_id, '‚ùå Sizning admin huquqlaringiz olib tashlandi.')
        except Exception:
            pass
    else:
        await call.message.edit_text('‚ùå Xatolik yuz berdi!')
    
    await call.answer()

@dp.message_handler(commands=['admins_list'], state='*')
async def admins_list_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    
    admins = get_all_admins()
    if not admins:
        await msg.answer('Hali birorta ham admin yo'q.')
        return
    
    text = '<b>üìã Adminlar ro'yxati:</b>\n\n'
    for i, (user_id, name, added_date) in enumerate(admins, 1):
        text += f"{i}. <b>{name}</b>\nID: <code>{user_id}</code>\nQo'shilgan: {added_date}\n\n"
    
    await msg.answer(text)

@dp.message_handler(commands=['check_admins'], state='*')
async def check_admins_cmd(msg: types.Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()
    
    admins = get_all_admins()
    if not admins:
        await msg.answer('Hali birorta ham admin yo'q.')
        return
    
    text = '<b>üîç Adminlar holati:</b>\n\n'
    for i, (user_id, name, added_date) in enumerate(admins, 1):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_chat_action(user_id, 'typing')
            status = "‚úÖ Faol"
        except Exception as e:
            error_msg = str(e)
            if "Chat not found" in error_msg:
                status = "‚ùå Botni ishga tushirmagan"
            elif "Forbidden" in error_msg:
                status = "üö´ Botni bloklagan"
            else:
                status = f"‚ùì Xatolik: {error_msg}"
        
        text += f"{i}. <b>{name}</b>\nID: <code>{user_id}</code>\nHolat: {status}\n\n"
    
    await msg.answer(text)

async def set_user_commands(dp):
    commands = [
        types.BotCommand("start", "Botni boshlash"),
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    ]
    await dp.bot.set_my_commands(commands)

async def notify_all_users(bot):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute("SELECT user_id FROM users WHERE status='approved'")
    rows = c.fetchall()
    conn.close()
    for (user_id,) in rows:
        try:
            await bot.send_message(user_id, "Iltimos, /start ni bosing va botdan foydalanishni davom eting!")
        except Exception:
            pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏–ª–∏ –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

if __name__ == '__main__':
    from aiogram import executor
    async def on_startup(dp):
        await set_user_commands(dp)
        await notify_all_users(dp.bot)
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
